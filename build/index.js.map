{"version":3,"file":"index.js","mappings":"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","sources":["webpack://afc-custom-cities/./src/index.js"],"sourcesContent":["jQuery(document).ready(function($) {\r\n\r\n    const CITIES = cityData.dests;\r\n    const SOURCE = cityData.source; \r\n\r\n    const BATCH_SIZE = 30;\r\n    const BATCHES = getBatches(CITIES, SOURCE, BATCH_SIZE);\r\n    console.log(\"BATCHES\", BATCHES[0]);\r\n\r\n    const BATCH_RESULTS = getResults(BATCHES);\r\n    //console.log(BATCH_RESULTS);\r\n\r\n    //const RESULTS = parseResults(BATCH_RESULTS, CITIES);\r\n\r\n    //console.log(RESULTS);\r\n\r\n});\r\n\r\n\r\n\r\n\r\nfunction getBatches(CITIES, SOURCE, BATCH_SIZE) {\r\n    let batches = [];\r\n    let batch = [SOURCE];\r\n\r\n    for (const city in CITIES) {\r\n\r\n        // if batch is full, push to BATCHES and start a new batch\r\n        if (batch.length >= BATCH_SIZE) {\r\n            batches.push(batch);\r\n            batch = [SOURCE];\r\n        }\r\n\r\n        // push city to batch\r\n        batch.push(CITIES[city]);\r\n    }\r\n\r\n    return batches;\r\n}\r\n\r\nfunction getKeyByValue(object, value) {\r\n    return Object.keys(object).find(key => object[key] === value);\r\n}\r\n\r\nfunction parseResults(BATCH_RESULTS, CITIES) {\r\n    const DISTS = {};\r\n\r\n    for (let batch in BATCH_RESULTS) {\r\n        let distances = batch.distances[0].splice(0, 1);\r\n        let destinations = batch.destinations.splice(0, 1);\r\n        \r\n        for (let i = 0; i < destinations.length; i++) {\r\n            let city = getKeyByValue(CITIES, destinations[i]);\r\n            let distance = distances[i];\r\n\r\n            DISTS[city] = distance;\r\n        }\r\n    }\r\n\r\n    return DISTS;\r\n}\r\n\r\nfunction getResults(BATCHES) {\r\n    const results = [];\r\n\r\n    //let result = callApi(BATCHES);\r\n    //console.log(result);\r\n    \r\n    for (let batch in BATCHES) {\r\n        let request = new XMLHttpRequest();\r\n\r\n        request.open('POST', \"https://api.openrouteservice.org/v2/matrix/driving-car\");\r\n\r\n        request.setRequestHeader('Accept', 'application/json, application/geo+json, application/gpx+xml, img/png; charset=utf-8');\r\n        request.setRequestHeader('Content-Type', 'application/json');\r\n        request.setRequestHeader('Authorization', cityData.apiKey);\r\n\r\n        request.onreadystatechange = function() {\r\n            if (this.readyState === 4) {\r\n                results.push(JSON.parse(this.responseText));\r\n            }\r\n        };\r\n\r\n        const parsedBatch = batch.map(coord => [parseFloat(coord[0]), parseFloat(coord[1])]);\r\n\r\n        let body = JSON.stringify({\r\n            locations: parsedBatch,\r\n            metrics: [\"distance\"],\r\n            sources: [0],\r\n            units: \"mi\"\r\n        });\r\n        console.log(body);\r\n        //request.send(body);\r\n        break;\r\n    }\r\n    \r\n    //console.log(\"results\", results);\r\n\r\n    //return results;\r\n}\r\n\r\nfunction callApi(batch) {\r\n    const parsedBatch = batch.map(coord => [parseFloat(coord[0]), parseFloat(coord[1])]);\r\n    let request = new XMLHttpRequest();\r\n\r\n    let results = 'placeholder';\r\n\r\n    request.open('POST', \"https://api.openrouteservice.org/v2/matrix/driving-car\");\r\n\r\n    request.setRequestHeader('Accept', 'application/json, application/geo+json, application/gpx+xml, img/png; charset=utf-8');\r\n    request.setRequestHeader('Content-Type', 'application/json');\r\n    request.setRequestHeader('Authorization', cityData.apiKey);\r\n\r\n    request.onreadystatechange = function() {\r\n        if (this.readyState === 4) {\r\n            //console.log('Status:', this.status);\r\n            //console.log('Headers:', this.getAllResponseHeaders());\r\n            //console.log('Body:', this.responseText);\r\n            results = JSON.parse(this.responseText);\r\n            //results.push(JSON.parse(this.responseText));\r\n        }\r\n    };\r\n\r\n    let body = JSON.stringify({\r\n        locations: parsedBatch,\r\n        metrics: [\"distance\"],\r\n        sources: [0],\r\n        units: \"mi\"\r\n    });\r\n    \r\n    request.send(body);\r\n    console.log(\"results: \", results);\r\n\r\n    //return results;\r\n}\r\n\r\nfunction returnResponse(data) {\r\n    return data;\r\n}"],"names":["jQuery","document","ready","$","CITIES","cityData","dests","SOURCE","source","BATCH_SIZE","BATCHES","getBatches","console","log","BATCH_RESULTS","getResults","batches","batch","city","length","push","getKeyByValue","object","value","Object","keys","find","key","parseResults","DISTS","distances","splice","destinations","i","distance","results","request","XMLHttpRequest","open","setRequestHeader","apiKey","onreadystatechange","readyState","JSON","parse","responseText","parsedBatch","map","coord","parseFloat","body","stringify","locations","metrics","sources","units","callApi","send","returnResponse","data"],"sourceRoot":""}